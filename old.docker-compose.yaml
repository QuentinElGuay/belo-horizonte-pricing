
services:

  mysql:
    restart: always
    image: mysql:8.4
    container_name: mlflow_db
    command: >
     mysqld
     --mysql-native-password=ON
     --character-set-server=utf8mb4
     --collation-server=utf8mb4_unicode_ci
    ports:
      - ${MYSQL_PORT}:3306
    environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    networks:
      - backend
    volumes:
        - db_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10
  
  s3:
    restart: always
    image: minio/minio
    container_name: mlflow_s3
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - frontend
      - backend
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
      - MINIO_ADDRESS=${MINIO_ADDRESS}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_STORAGE_USE_HTTPS=${MINIO_STORAGE_USE_HTTPS}
      - MINIO_CONSOLE_ADDRESS=${MINIO_CONSOLE_ADDRESS}
    command: server /data --console-address :9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  mlflow:
    build: ./mlflow
    container_name: mlflow_ui
    restart: always
    ports:
      - 5000:5000
    depends_on:
      mysql:
        condition: service_healthy
      s3:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
    #  - MLFLOW_S3_IGNORE_TLS=true
    entrypoint: >
      mlflow server
      --host 0.0.0.0
      --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      --serve-artifacts
      --artifacts-destination s3://${MLFLOW_BUCKET_NAME}/
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MLFLOW_PORT}/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  frontend:
  backend:

volumes:
    airflowdata:
    db_data:
    minio_data:
